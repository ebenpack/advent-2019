{-# LANGUAGE MultiWayIf #-}

module Donut where

import Util

import Data.Char
import Data.Maybe
import Control.Monad
import qualified Data.Map as Map
import qualified Data.Set as Set

donutMazeString :: [String]
donutMazeString =
    [ "                                         J       F           Z     S   X           H     T                                             "
    , "                                         Q       V           V     K   P           K     D                                             "
    , "  #######################################.#######.###########.#####.###.###########.#####.###########################################  "
    , "  #...#...#.#...........#.#.....#.#.....#...#.#.#.....#.#...#...#...#.#...#.........#.#...................#.#.#.#...#.#.....#.......#  "
    , "  ###.###.#.#######.#####.#.#.#.#.###.#.###.#.#.#.###.#.###.#.#####.#.#.#.#######.###.#.#.#.###.###.#.###.#.#.#.###.#.###.#.###.###.#  "
    , "  #.#.....#.#.#.#.#...#.#...#.#.....#.#.....#.......#.#.........#...#...#.#.....#.....#.#.#.#.#...#.#.#.#.......#...#.....#.#.....#.#  "
    , "  #.#####.#.#.#.#.#.###.#########.#.###.#.#####.#######.#.#########.###.#####.#.#####.#.#####.#########.#.#######.#.###.#####.#.#.#.#  "
    , "  #.#...#.....#...#...#.....#...#.#.....#.#.#.......#...#.#...#.....#.#.......#.#.....#.#...........#...#.#.#.....#.#.......#.#.#.#.#  "
    , "  #.###.#.###.###.###.###.###.#####.###.###.###.#########.#.#.#.#.###.#######.#####.###.#.#.###########.###.#.#######.###.###.#####.#  "
    , "  #...#.#.#.#...#.#.....#...#.........#.....#.#...#.........#.#.#.....#.........#.#.#.#...#...#...#.......#.....#...#.#.#.#.#.#.#.#.#  "
    , "  ###.#.###.###.#.###.###.###############.###.#.###.#.###.###.#######.#.###.#####.#.#.#.#.###.#.#######.###.#####.###.#.###.#.#.#.###  "
    , "  #.#.................#.#.#...#...#.........#...#.#.#.#...#.....#.#...#.#.....#.#.....#.#.#.......#.#.......#.....#.#.#.............#  "
    , "  #.#################.#.#.###.#.#####.#.###.###.#.###.#.#.###.###.#.###.#######.#.###.#####.#######.###.###.###.###.#.#.###.###.#####  "
    , "  #.#...#...#...#.#...............#.#.#.#...#.......#.#.#...#.#.......#.......#...#...#...#...............#.......#.......#.#.....#.#  "
    , "  #.###.#.#####.#.#.#####.#####.###.#####.#####.#.###########.###.#.#.#.#######.###.#.#.#.###.#####.###.#########.###.#.###########.#  "
    , "  #...#.....#.#.....#...#.#.#.#.............#...#.#.#...#.#...#...#.#.#.#...#...#...#.#.#.........#...#.....#...#.#...#...#.#.#.#...#  "
    , "  #.###.###.#.#####.###.#.#.#.###.#######.#.###.###.###.#.###.###.###.#.#.#########.#.###.#.###.###.#####.###.#######.#####.#.#.###.#  "
    , "  #...#...#.#.#...#.#.....#.............#.#...#.......#...#.....#.#...#.....#...#.#.#.#...#.#.....#.....#.....#.....#.#.#...#.#.....#  "
    , "  ###.#.#####.###.###.#.#.###.#.#.#######.###.###.###.#.#.###.#.#####.###.###.###.#.#.#.#######.###.#.###########.###.#.###.#.###.###  "
    , "  #.#...#.#...........#.#.#...#.#.#...#...#...#.#...#.#.#.....#.#.#...#...........#.#.#...#.#.....#.#.....#.#...#.#.....#.#...#.#...#  "
    , "  #.#.###.#.#####.#.#.###.#########.#####.###.#.#.###########.###.###.#.#.#.###.#####.#.###.###########.###.###.#.###.###.#.###.#.###  "
    , "  #.#.....#.#.....#.#.#.......#.....#...#.#...#.....#.....#.#.....#...#.#.#...#.....#.#.#.#...#...#.#.....#.#.......#.........#.#.#.#  "
    , "  #.#.###########################.#####.###.#.#.#########.#.#.#######.#.#######.#.###.#.#.#.###.#.#.#.#.###.###.#####.#.###.###.#.#.#  "
    , "  #.....#.....#.#...#.....#.#...#.....#.#.#.#.#...#...#.#...#...#.....#.....#.#.#.#...#...#.....#...#.#.#.....#.#.#.#.#...#.#.#.....#  "
    , "  #.#.###.#####.#.#.#####.#.###.###.###.#.###.#.###.###.#.#.#.#######.#.#.###.#.#####.###.#.###############.###.#.#.###.#####.###.###  "
    , "  #.#.....#...#...#.....#.#.....#...#.#...#...#.......#...#...#.......#.#.#.#...#...#.#.....#.#.#.....#.#.................#...#.#...#  "
    , "  ###.#######.#####.#.#.#.#####.#.#.#.###.###.#.#.###.#.#######.###.###.###.###.#.#.#.#.#.###.#.###.###.#######.###.#####.###.#.#.###  "
    , "  #...#.#.#...#.#.#.#.#.....#.#.#.#...#.....#.#.#...#.#.....#.#.#...#.....#...#.#.#...#.#.#.#.......#.....#.#.....#.....#.#.....#.#.#  "
    , "  #.#.#.#.#.###.#.#########.#.#.#####.###.###.#.#.###.#.#.#.#.#####.###.#.###.#####.###.###.#.###.#.###.#.#.###.#############.###.#.#  "
    , "  #.#.#.#...#.#.#.....#.............#.#.....#.#.#.#...#.#.#.....#.....#.#.....#...#...#...#.#.#.#.#...#.#.#...#.#...#.#...#.....#...#  "
    , "  #.###.#.###.#.###.#####.###.#####.#.#####.#.###.###.#######.#######.###.###.###.###.#.###.#.#.###.#####.###.#.###.#.###.###.###.#.#  "
    , "  #...#.....#...#.#.....#.#.#...#.#.............#.#.....#...#.....#.#...#.#...#...#...#.......#...#.#.#...#.....#.#...#.....#...#.#.#  "
    , "  #.#######.###.#.###.#####.#####.#####.#.###.###.###.#####.#.#####.#.#######.#.#.#.#####.###.#.#####.###.#.#####.###.###.#####.###.#  "
    , "  #...#.#.....#.....#...#...#...#.#.....#.#...#.#.#...#.......#...#.#...#.....#.#.#...#...#...#...#...#.#.....#.#.#.#.#...#...#...#.#  "
    , "  #.###.###.###.#######.#.#####.#.###########.#.#.###.#.###.###.#.#.#.#######.#.#.###.###.#.###.###.###.#.###.#.#.#.#.###.#.###.###.#  "
    , "  #.#.#.............#.#...#.#.#...#.#...........#.#...#...#...#.#.........#...#.#.......#.#.......#.........#.....#.#...#...........#  "
    , "  #.#.#.#####.#.#.#.#.#.#.#.#.#.###.#####.#########.#####.#####.###########.###.#############.#######.#.###########.###.#######.#.###  "
    , "  #...#.#...#.#.#.#.#...#.#.#...#...#    J         R     L     Y           L   I             X    #.#.#.#.#.#.#...#.#...#.....#.#.#.#  "
    , "  #.###.#.###########.#####.###.#.###    N         P     P     L           S   B             P    #.###.#.#.#.#.###.#.#######.#.###.#  "
    , "  #...#.#...........#.#.#.#...#...#.#                                                             #.#.....#.........#.....#.#...#.#..AA"
    , "  #.###.#.#.#########.#.#.###.#.###.#                                                             #.###.#.#.#.###.#.#.###.#.###.#.#.#  "
    , "YL..#.....#.#.#.#.#.#.#..............EK                                                           #.....#.#.#.#...#...#.......#.#....UT"
    , "  #.###.#.###.#.#.#.#.###.#####.###.#                                                             #.#####.#.#.#.###.###.#######.###.#  "
    , "  #.....#.......#.......#.#.#.#.#.#.#                                                           ZV..#...#.#.#.#...#...#.#.....#.....#  "
    , "  #####.###.###.#######.###.#.#.#.###                                                             #.#.###.#.###.#######.###.#.#.#.#.#  "
    , "  #.......#...#.#.........#.........#                                                             #.#.#.#.....#.#...#.......#...#.#.#  "
    , "  #########.#######.###.#.#.###.#####                                                             ###.#.#.#.#.#.#.#########.###.###.#  "
    , "  #.#...#...........#...#...#.#.#...#                                                             #.....#.#.#.#.#.........#...#.#.#.#  "
    , "  #.###.#####################.#####.#                                                             ###.#.#########.#.#.###.#######.###  "
    , "  #.............#...........#...#.#..YS                                                           #...#.#...#.#.#.#.#.#.........#...#  "
    , "  #####.###.###.#.#####.###.###.#.#.#                                                             #.#.#.#.###.#.#####.#####.#######.#  "
    , "  #.......#...#.......#...#.........#                                                           FV..#.#...#.....#...#...#...#...#...#  "
    , "  ###.#.#.#.#.#.#.###.#.###.###.###.#                                                             #####.#####.#.###.###.#.###.#.#.#.#  "
    , "JB..#.#.#.#.#.#.#...#.#.#.....#.#.#.#                                                             #...........#.........#.....#...#..ZP"
    , "  #.#.###########.#.###.#########.###                                                             #.#.#######################.#######  "
    , "ZZ....#.....#.#.#.#.#.....#.........#                                                             #.#.#.#...#.#.............#.#......IB"
    , "  #.#####.###.#.#######.###.###.#####                                                             #####.#.#.#.#.#.#.#.#####.###.#.#.#  "
    , "  #.#...........#.....#.#...#.#.....#                                                           QR......#.#.#...#.#.#...#.....#.#.#.#  "
    , "  ###.#.#####.#####.#########.#.###.#                                                             #####.#.#.#.#####.#########.#.###.#  "
    , "  #.#.#...#.#.....#.#.......#.....#.#                                                             #.#.....#.....#...#.#...#...#...#.#  "
    , "  #.#####.#.###.###.###.#####.#.#.#.#                                                             #.###.#.###.###.#.#.#.###.###.#####  "
    , "  #.#...#.....#...#.#.#.#.#.#.#.#.#..ZP                                                           #...#.#...#...#.#.#.#.#.......#.#.#  "
    , "  #.#.#.#####.#.###.#.#.#.#.#####.###                                                             #.#################.#.#.#.#####.#.#  "
    , "YS....#.......#...................#.#                                                           TD..#...#.....#.#...#.#.#.#.#.....#..ZJ"
    , "  #######.###.#########.###.#.###.#.#                                                             #.###.###.###.#.###.#.###.#.###.#.#  "
    , "EK......#.#.#...#.........#.#.#.....#                                                             #.......#...#.....#.#.#...#...#.#.#  "
    , "  #####.###.#####.#.#################                                                             ###.#.###.###.#.###.#.#######.#.#.#  "
    , "  #.....#.#.#...#.#.#.#.#.....#.#...#                                                             #...#.#.....#.#.#.....#.......#...#  "
    , "  ###.#.#.#.#.#######.#.#.###.#.#.###                                                             #####.###.###.#.###.#.###.#.#.#.#.#  "
    , "  #...#.#.......#.........#.#.#.#...#                                                             #.#.#.........#.....#.....#.#.#.#.#  "
    , "  ###.###.###.#.#####.###.#.#.#.#.###                                                             #.#.#######################.#######  "
    , "  #.#.......#.#.......#.#.#.#........QP                                                           #...#...#...........#.....#.#.....#  "
    , "  #.###########.#####.#.###.#########                                                             #.#.#.#.#.###.#####.#.#.#####.###.#  "
    , "MP........#...#...#...#.......#.....#                                                             #.#...#.....#.#.....#.#.....#...#.#  "
    , "  #######.#.#########.#.#####.#.###.#                                                             #.###.#.#.#.#.#####.#.#####.###.#.#  "
    , "  #.........#...#...#.#.#.....#...#..TV                                                         NU....#.#.#.#.#.#.........#.....#.#..RP"
    , "  #.###.#######.#.#####.###.#####.###                                                             #.###.###############.#######.#.###  "
    , "  #.#...#.......#.#.#...#...#.....#.#                                                             #.#.#...#...#.#...#.#.#...#.......#  "
    , "  #.#####.#.#####.#.#.#####.###.###.#                                                             ###.#.###.###.###.#.###.#####.#####  "
    , "  #.......#...........#...#.....#.#.#                                                           RX....#.#.#.#.....#.#.#...#.#...#....JN"
    , "  #######.#######.#.#.#.#########.#.#                                                             #.#####.#.#.#####.#.#.#.#.#######.#  "
    , "  #...#.......#...#.#.#.....#...#....MP                                                           #.#.#...#...#.........#.#.....#...#  "
    , "  #.###################.###.#.#.#.#.#                                                             #.#.###.###.#####.#.#.#####.#####.#  "
    , "OF..#...#...#...#.#.#.....#...#.#.#..NZ                                                           #.#.....#...#...#.#.#.#.#.#.#.#.#.#  "
    , "  #.###.###.###.#.#.###.#.#####.#.#.#                                                             #.#.#.###.#.###.###.#.#.#.#.#.#.#.#  "
    , "QP..#...#...........#...#.#.....#.#.#                                                             #...#.....#.........#.............#  "
    , "  #.#.#.###.###.#.#.#####.#.#####.###                                                             #.#.#.#.###.###.###.#.#.#.#.###.#.#  "
    , "  #...#.....#...#.#.......#.......#.#                                                             #.#.#.#...#.#.#.#...#.#.#.#.#.#.#.#  "
    , "  #.#####.###.#.#.#.#.#.###.#.#.#.#.#      O           U     J   J       Z         H       S      ###.#####.#.#.#####.#.#.#####.#.###  "
    , "  #.....#.#...#.#.#.#.#.#...#.#.#...#      F           T     Q   B       J         K       K      #.....#.#.#.#.......#.#...#.......#  "
    , "  #.#.###.#.#.#.###.#.#.###.###.#.#########.###########.#####.###.#######.#########.#######.###########.#.#####.#.#.#.#####.###.#####  "
    , "  #.#...#.#.#.#...#.#.#.#.....#.#...#.......#...#.#...#.#.....#.........#...#...#.....#.#...#...#...........#...#.#.#.....#.#.......#  "
    , "  #.#.###.#.#.#.###.#.###.#####.#.#######.###.#.#.#.#.#.###.#######.#######.#.#.#.#####.###.#.###.#####.#.###.#.#####.#########.#.#.#  "
    , "  #.#.#.#.#.#.#...#.#...#...#...#...#...#.....#...#.#...#.#...#.#...#...#...#.#.#...#.#.#.......#...#...#...#.#.#.......#.#.....#.#.#  "
    , "  #.#.#.###.###.#.#######.#.###.#######.#######.#.#.#####.#.#.#.#.#####.#.###.#.#.###.#.#.#####.#########.###.###.#.###.#.#.###.#.###  "
    , "  #.#.#.#...#...#.#.......#...#.#...#.#.....#...#.#...#.....#...#.#...........#.#.......#...#.#.....#.....#.....#.#.#.....#...#.#.#.#  "
    , "  #.#.#.#.#.###.###.###.###.#######.#.#.#.#.#.#.#####.#####.#####.###.###.#.###.###.###.###.#.#######.#.#.#######.#.#####.#####.###.#  "
    , "  #.#...#.#.#...#.....#.#...#...........#.#...#.#.#.....#.....#.#...#.#...#.#.#...#...#.#.......#...#.#.#...#.....#...#...#.#.......#  "
    , "  #.#.###.#.#######.#.#####.#.###.###.###.#######.#.#.###.#####.#.#####.#.###.#.#######.#.###.#.#.#####.#.#####.###.#.###.#.###.###.#  "
    , "  #.#...#.#.....#.#.#.#...#.#.#.#...#.#...#.......#.#...#.......#.....#.#...#...#...#.#.#...#.#.#.....#.#.#.#.....#.#.#.....#.#...#.#  "
    , "  #.#.#####.#.###.#.#.###.#.###.#.#######.#.#.###.#####.###.###.###.#########.#.#.###.#.#.#####.#.#####.###.#.###.###.###.#.#.#.###.#  "
    , "  #.#.#.....#...#.#.#.#.....#.....#.........#.#.....#.#...#.#...#.......#.#...#...#.....#...#.........#.#.....#.#...#.#...#...#...#.#  "
    , "  ###.###.###.###.#######.#.#####.###########.#####.#.#.#######.#.#.###.#.#####.#####.###.###.###.###########.#.###.#####.#####.#.#.#  "
    , "  #.#.#.#...#...#.....#...#...#...#...............#.#...#.......#.#...#...#.#.....#.#...#...#.#.#.#.#.#.#.#.......#...#.....#...#.#.#  "
    , "  #.#.#.#.###.###.#.###.###.#######.#.#.#.#.###########.#####.#.#.#.#####.#.#.#.###.###.#.#####.###.#.#.#.#####.#########.#.#####.###  "
    , "  #.....#.#.#...#.#.....#.......#.#.#.#.#.#.#.......#...#.....#.#.#.#.#...#.#.#.#...#...#.....#.#.#.#.#.....#.....#.......#.#...#...#  "
    , "  #.#.###.#.#.#######.#.#.###.###.#######.#######.###.#######.###.###.#####.#.#.#.#.###.#.#####.#.#.#.#.###########.#.#.#.###.###.###  "
    , "  #.#...#...#.#.....#.#.#.#...#.#.#.#...........#.#.....#.....#...#...#.....#.#...#.#...#...#.#...#.....#.#.....#.#.#.#.#.......#.#.#  "
    , "  #.#####.#.#####.#####.#.#.###.#.#.#####.#.#####.#.###.###.#.###.###.###.#.###.#######.#.###.#.###.###.#.###.###.#.#.###.#####.#.#.#  "
    , "  #...#...#...#.........#.#.#.........#...#.#.....#.#.....#.#.#.#.....#.#.#.......#.#...#.......#.#.#.#.#.....#...#.#.#.......#.#...#  "
    , "  #.###.#.#.#.###.###.###.#######.###.###.#.#####.###.#.#####.#.#.#.###.###.###.###.###.###.#.###.#.#.###.#####.###.#####.#######.#.#  "
    , "  #...#.#.#.#.#.#...#...#...#.#.....#...#.#.....#.....#...#.....#.#.#.#.....#.#.#.#.....#...#...............#.....#.....#...#.#...#.#  "
    , "  #.###.#.#.###.#.###.#######.#.#.#####.#.#######.#.###.###.###.#.###.###.#.#.###.###.#####.#.#.###.#########.#####.#.#####.#.#######  "
    , "  #.#.#.#.#.#.....#...#.#.#.....#.#.......#.#.#.#.#...#.#.#.#.#.#.#.....#.#.....#...#.....#.#.#...#...#...#...#...#.#...#.....#.....#  "
    , "  ###.#.###.#.#.###.###.#.#.#.#.###.#####.#.#.#.#.#######.###.#.#.#.#.#.#######.###.###.#######.#########.###.#.#.#.#######.###.#.###  "
    , "  #.#...#.#.#.#...#.#.......#.#.#...#...........#.#...#.........#.#.#.#...#.....#.........#.#.#...#.....#.....#.#.#.#.#.#.#.....#...#  "
    , "  #.###.#.#.###.#.#.#.#.###.###.#.#######.#.###.#.#.#####.#####.#.###.#.###.#.#.#.###.#####.#.#.#######.#.###.###.###.#.#.###.#.#.#.#  "
    , "  #.....#...#...#.#.#.#.#...#...#.#...#...#.#.#.#.......#.#.....#.#...#...#.#.#.#...#.#.#.#.......#.#.......#.#.#.......#.#...#.#.#.#  "
    , "  #.#.#########.###.#.#####.###.#####.###.###.#.#######.#####.###.#.###.#####.###.###.#.#.#.#.#.###.#####.###.#.#.#######.#####.###.#  "
    , "  #.#.#...........#.#.#.....#.#.#.....#.#.#.....#.#.#.....#...#...#.#.#.#.#.#.#...#.#.#.#...#.#.....#.#.....#.#.#.............#.#...#  "
    , "  #######.###.#.###.#.#.#####.###.###.#.#.###.###.#.#.#######.###.#.#.#.#.#.#.###.#.###.#.###.#######.###.#####.#.###################  "
    , "  #...#...#...#...#.#.#...#.#...#.#.....#.#.#.....#.....#.......#...#.......#...#.......#.#.#...........#.#.#.#.#.#...........#.#.#.#  "
    , "  ###.#.#####.#####.#.###.#.###.#.###.#.###.###.#.#.###.###.#.#.#.#.#.#########.#######.###.#.#.#########.#.#.#.#.#.#####.#.###.#.#.#  "
    , "  #.........#.#.....#.#...#.......#...#.........#.#.#.....#.#.#.#.#.#...#.......#...........#.#.........................#.#.........#  "
    , "  #########################################.#######.###########.#######.###.#####.#############.#####################################  "
    , "                                           L       R           N       L   T     N             Q                                       "
    , "                                           P       X           Z       S   V     U             R                                       "
    ]
data DonutTile = DonutMazeFloor | DonutMazeWall | DonutMazePortal String Bool deriving (Eq, Ord, Show)

type DonutMaze = Map.Map Point DonutTile

isDonutPortal (DonutMazePortal _ _) = True
isDonutPortal _ = False

isDonutWall DonutMazeWall = True
isDonutWall _ = False

portalName (DonutMazePortal c _) = c
portalName _ = ""

matchingPortal (DonutMazePortal a _) (DonutMazePortal b _) = a == b
matchingPortal _ _ = False

findPortalExit :: DonutMaze -> Point -> Maybe Point
findPortalExit maze p =
    let entrance = maze Map.! p
        exit = Map.toList (Map.filterWithKey (\p' x -> isDonutPortal x && matchingPortal entrance x && p /= p') maze)
    in
        if null exit
        then Nothing
        else Just $ fst $ head exit

findMazeNeighbors :: DonutMaze -> Point -> (DonutTile -> Bool) -> Set.Set Point
findMazeNeighbors maze (x,y) isNavigable =
    let neighbors = do x' <- [-1..1]
                       y' <- [-1..1]
                       guard $ abs x' /= abs y'
                       let newCoords = (x + x', y + y')
                       let val = Map.lookup newCoords maze
                       guard $ maybe False isNavigable val
                       pure newCoords
        donutPortal = findPortalExit maze (x,y)
    in
        Set.fromList $
            if isDonutPortal (maze Map.! (x,y)) && isJust donutPortal
            then maybe [] pure donutPortal ++ neighbors
            else neighbors

findRecursiveMazeNeighbors :: Int -> DonutMaze -> Point -> (DonutTile -> Bool) -> Set.Set (Int, Point)
findRecursiveMazeNeighbors level maze (x,y) isNavigable =
    let currentNode = maze Map.! (x,y)
        neighbors = do x' <- [-1..1]
                       y' <- [-1..1]
                       guard $ abs x' /= abs y'
                       let newCoords = (x + x', y + y')
                       let val = Map.lookup newCoords maze
                       guard $ maybe False isNavigable val
                       pure (level, newCoords)
        donutPortal = findPortalExit maze (x,y)
    in
        Set.fromList $
            if isDonutPortal (maze Map.! (x,y)) && isJust donutPortal
            then makeDonuts level currentNode (fromJust donutPortal) ++ neighbors
            else neighbors
    where
    makeDonuts level (DonutMazePortal _ isInner) portalExit
        | not isInner && level == 0 = []
        | isInner = [(level + 1, portalExit)]
        | otherwise = [(level - 1, portalExit)]


findShortestMazePathBetween :: DonutMaze -> Point -> Point -> [Point]
findShortestMazePathBetween maze source destination = go [[source]] (Set.singleton source)
   where
    isNavigable = not . isDonutWall
    go :: [[Point]] -> Set.Set Point -> [Point]
    go queue discovered
        | null queue = [] -- no path found
        | otherwise =
            let currentPath = last queue -- YOLO!
                currentNode = head currentPath -- double YOLO!
                neighbors = Set.difference (findMazeNeighbors maze currentNode isNavigable) discovered
                discovered' = Set.union discovered neighbors
                neighborList = Set.toList neighbors
                queue' = map (: currentPath) neighborList ++ init queue
            in
                if currentNode == destination
                then reverse $ tail currentPath
                else go queue' discovered'

findShortestMazePathBetweenRecursive :: DonutMaze -> Point -> Point -> [(Int, Point)]
findShortestMazePathBetweenRecursive maze source destination = go [[(0, source)]] (Set.singleton (0, source))
   where
    isNavigable = not . isDonutWall
    go :: [[(Int, Point)]] -> Set.Set (Int, Point) -> [(Int, Point)]
    go queue discovered
        | null queue = [] -- no path found
        | otherwise =
            let currentPath = last queue -- YOLO!
                (currLevel, currentNode) = head currentPath -- double YOLO!
                neighbors = Set.difference (findRecursiveMazeNeighbors currLevel maze currentNode isNavigable) discovered
                discovered' = Set.union discovered neighbors
                neighborList = Set.toList neighbors
                queue' = map (: currentPath) neighborList ++ init queue
            in
                if (currLevel, currentNode) == (0, destination)
                then reverse $ tail currentPath
                else go queue' discovered'

dmaz = makeDonutMaze donutMazeString
portent = Map.toList (Map.filterWithKey (\p' x -> isDonutPortal x) dmaz)

findShortestPath mazeString =
    let maze = makeDonutMaze mazeString
        start = fst $ head $ Map.toList (Map.filterWithKey (\p' x -> isDonutPortal x && portalName x == "AA") maze)
        end = fst $ head $ Map.toList (Map.filterWithKey (\p' x -> isDonutPortal x && portalName x == "ZZ") maze)
    in findShortestMazePathBetween maze start end

findShortestRecursivePath mazeString =
    let maze = makeDonutMaze mazeString
        start = fst $ head $ Map.toList (Map.filterWithKey (\p' x -> isDonutPortal x && portalName x == "AA") maze)
        end = fst $ head $ Map.toList (Map.filterWithKey (\p' x -> isDonutPortal x && portalName x == "ZZ") maze)
    in findShortestMazePathBetweenRecursive maze start end



day1DonutAnswer = length $ findShortestPath donutMazeString


-- 748 too loiw!
day2DonutAnswer = length $ findShortestRecursivePath donutMazeString

makeDonutMaze :: [String] -> DonutMaze
makeDonutMaze xs =
    let maze = makeMaze' xs
        mazeWidth = Set.findMax (Set.map fst $ Map.keysSet maze)
        mazeHeight = Set.findMax (Set.map snd $ Map.keysSet maze)
        mapped = mapMaze maze mazeWidth mazeHeight
    in addPortals maze mapped mazeWidth mazeHeight
    where
    mapMaze :: Map.Map Point Char -> Int -> Int -> DonutMaze
    mapMaze maze mazeWidth mazeHeight = Map.fromList $ do
        y <- [0..mazeHeight]
        x <- [0..mazeWidth]
        let c = maze Map.! (x,y)
        if | c == '#' -> pure ((x,y), DonutMazeWall)
           | c == '.' -> pure ((x,y), DonutMazeFloor)
           | otherwise -> []
    isPortal maze a b c = fromMaybe False $ do a' <- Map.lookup a maze
                                               b' <- Map.lookup b maze
                                               c' <- Map.lookup c maze
                                               if isUpper a' && isUpper b' && c' == '.' then pure True else pure False
    portalName maze a b = [maze Map.! a, maze Map.! b]
    addPortal charMaze (x,y) inner =
        let curr = (x,y)
            below1 = (x, y + 1)
            below2 = (x, y + 2)
            right1 = (x + 1, y)
            right2 = (x + 2, y)
            left1 = (x - 1, y)
            left2 = (x - 2, y)
            above1 = (x, y - 1)
            above2 = (x, y - 2)
        in
            if | isPortal charMaze curr below1 below2 -> -- from above
                    pure (below2, DonutMazePortal (portalName charMaze curr below1) inner)
               | isPortal charMaze curr right1 right2 -> -- from left
                    pure (right2, DonutMazePortal (portalName charMaze curr right1) inner)
               | isPortal charMaze left1 curr left2 -> -- from right
                    pure (left2, DonutMazePortal (portalName charMaze left1 curr) inner)
               | isPortal charMaze above1 curr above2 -> -- from below
                    pure (above2, DonutMazePortal (portalName charMaze above1 curr) inner)
               | otherwise -> []
    addPortals charMaze maze mazeWidth mazeHeight =
        let walls = Map.keysSet $ Map.filter (== '#') charMaze
            minY = Set.findMin (Set.map snd walls)
            maxY = Set.findMax (Set.map snd walls)
            minX = Set.findMin (Set.map fst walls)
            maxX = Set.findMax (Set.map fst walls)
            updates = Map.fromList $ do y <- [0..mazeHeight]
                                        x <- [0..mazeWidth]
                                        let c = charMaze Map.! (x,y)
                                            isOuter =
                                                y <= minY || y >= maxY
                                                || x <= minX || x >= maxX
                                        if | c == '#' -> []
                                           | c == '.' -> []
                                           | isUpper c -> addPortal charMaze (x,y) (not isOuter)
                                           | otherwise -> []
        in Map.union updates maze
    makeMaze' :: [String] -> Map.Map Point Char
    makeMaze' xs = Map.fromList $ do
        (y, row) <- zip [0..] xs
        (x, cell) <- zip [0..] row
        pure ((x,y), cell)

drawMaze :: DonutMaze -> IO ()
drawMaze maze = do
    forM_ [ (x,y) | y <- [0..mazeHeight], x <- [0..mazeWidth]]
        (\(x,y) -> (if x == 0 then putStr "\n" else pure ()) >> printTile (x,y))
    putStr "\n\n"
    where
    mazeWidth = Set.findMax (Set.map fst $ Map.keysSet maze)
    mazeHeight = Set.findMax (Set.map snd $ Map.keysSet maze)
    printTile p = maybe (putStr " ") printTile' (Map.lookup p maze)
    printTile' DonutMazeWall = putStr "#"
    printTile' DonutMazeFloor = putStr "."
    printTile' (DonutMazePortal [c,d] _) =
        let n = (ord c + ord d)
            n' = if n > 90 then n - 90 else n -- 65-90
        in putStr [chr n']
    printTile' _ = putStr " "

testdont =
    [ "         A           "
    , "         A           "
    , "  #######.#########  "
    , "  #######.........#  "
    , "  #######.#######.#  "
    , "  #######.#######.#  "
    , "  #######.#######.#  "
    , "  #####  B    ###.#  "
    , "BC...##  C    ###.#  "
    , "  ##.##       ###.#  "
    , "  ##...DE  F  ###.#  "
    , "  #####    G  ###.#  "
    , "  #########.#####.#  "
    , "DE..#######...###.#  "
    , "  #.#########.###.#  "
    , "FG..#########.....#  "
    , "  ###########.#####  "
    , "             Z       "
    , "             Z       "
    ]

donttest = findShortestPath testdont

-- [(9,2),(9,3),(9,4),(9,5),(2,8),(3,8),(4,8),(4,9),(4,10),(5,10),(2,13),(3,13),(3,14),(3,15),(11,12),(11,13),(12,13),(13,13),(13,14),(13,15)]